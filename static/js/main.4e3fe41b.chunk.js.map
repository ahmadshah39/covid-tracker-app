{"version":3,"sources":["api/api.ts","context/ActionTypes.ts","context/GlobalReducer.tsx","context/GlobalState.tsx","components/TableSection/DataTable/TableRow.tsx","components/TableSection/DataTable/Pagination.tsx","components/TableSection/DataTable/Datatable.tsx","components/SearchData.tsx","components/TableSection/TableSection.tsx","components/DataChart/Datachart.tsx","components/Cards/InfoCard/InfoCard.tsx","components/Cards/Cards.tsx","Pages/Home.tsx","Pages/Country.tsx","components/Footer/Footer.tsx","App.tsx","index.tsx"],"names":["API_URL","fetchGlobalData","a","url","fetch","json","res","fetchHistoricalGlobalData","dates","Object","keys","cases","values","deaths","recovered","fetchCountryHistoricalData","value","message","timeline","fetchCountriesData","fetchCountryData","GET_GLOBAL_DATA","GET_GLOBAL_HISTORY_DATA","GET_COUNTRIES_DATA","GET_COUNTRY_DATA","GET_COUNTRY_HISTORICAL_DATA","SET_FILTER_VALUE","CLEAR_FILTER","SET_LOADING","GlobalReducer","state","action","type","loading","global","payload","globalHistory","countriesData","countryData","countryHistory","countriesFiltered","filter","data","country","toLowerCase","indexOf","Error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","getGlobalData","getHistoricalGlobalData","getCountriesData","getCountryData","getCountryHistoricalData","Provider","setLoading","filterCountries","useGlobalContext","useContext","TableRow","history","useHistory","onClick","push","countryInfo","iso2","_hover","bgColor","borderBottomColor","size","display","mr","name","src","flag","textAlign","casesPerOneMillion","critical","deathsPerOneMillion","tests","testsPerOneMillion","Pagination","setPerPage","setCurrentPage","iFirst","iLast","length","currentPage","perPage","justifyContent","alignItems","p","color","border","_focus","onChange","e","target","mx","_active","isDisabled","outline","isRound","icon","Math","ceil","Datatable","useState","countriesPerPage","setCountriesPerPage","currentPageNum","setCurrentPageNum","useEffect","thickness","speed","emptyColor","indexOfLastCountry","indexOfFirstCountry","currentCountries","slice","console","log","width","overflowX","pt","overflowY","textColor","map","val","parseFloat","SearchData","templateColumns","variant","pr","placeholder","focusBorderColor","TableSection","spacing","mt","Datachart","React","memo","my","fontSize","labels","datasets","label","borderColor","fill","backgroundColor","height","options","maintainAspectRatio","responsive","InfoCards","title","total","today","perMill","colorText","colorBorder","iconColor","iconName","borderTop","borderStyle","borderRadius","borderTopColor","py","as","fontWeight","Cards","todayCases","todayRecovered","active","population","activePerOneMillion","recoveredPerOneMillion","dataArray","FaGlobeAmericas","RiSurgicalMaskFill","FaHeart","FaSkullCrossbones","gap","item","InfoCard","Home","minH","Country","id","useParams","Footer","href","App","maxW","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e3fe41b.chunk.js","sourcesContent":["const API_URL = \"https://disease.sh/v3/covid-19\";\r\n//   Actions\r\n//   getGlobalData\r\nexport const fetchGlobalData = async () => {\r\n  const url = `${API_URL}/all`;\r\n  const res = await (await fetch(url)).json();\r\n  return res;\r\n};\r\n//   fetchHistoricalGlobalData\r\nexport const fetchHistoricalGlobalData = async () => {\r\n  const url = `${API_URL}/historical/all`;\r\n  const res = await (await fetch(url)).json();\r\n  const dates = Object.keys(res.cases);\r\n  const cases: number[] = Object.values(res.cases);\r\n  const deaths: number[] = Object.values(res.deaths);\r\n  const recovered: number[] = Object.values(res.recovered);\r\n  return { dates, cases, deaths, recovered };\r\n};\r\n//   fetchCountryHistoricalData\r\nexport const fetchCountryHistoricalData = async (value: string) => {\r\n  const url = `${API_URL}/historical/${value}`;\r\n  const res = await (await fetch(url)).json();\r\n  if (!res.message) {\r\n    const dates = Object.keys(res.timeline.cases);\r\n    const cases: number[] = Object.values(res.timeline.cases);\r\n    const deaths: number[] = Object.values(res.timeline.deaths);\r\n    const recovered: number[] = Object.values(res.timeline.recovered);\r\n    return { dates, cases, deaths, recovered };\r\n  }\r\n  return res;\r\n};\r\n//   fetchCountriesData\r\nexport const fetchCountriesData = async () => {\r\n  const url = `${API_URL}/countries`;\r\n  const res = await (await fetch(url)).json();\r\n  return res;\r\n};\r\n//   fetchCountryData\r\nexport const fetchCountryData = async (value: string) => {\r\n  const url = `${API_URL}/countries/${value}`;\r\n  const res = await (await fetch(url)).json();\r\n  return res;\r\n};\r\n","// Action types\r\nexport const GET_GLOBAL_DATA = \"GET_GLOBAL_DATA\";\r\nexport const GET_GLOBAL_HISTORY_DATA = \"GET_GLOBAL_HISTORY_DATA\";\r\nexport const GET_COUNTRIES_DATA = \"GET_COUNTRIES_DATA\";\r\nexport const GET_COUNTRY_DATA = \"GET_COUNTRY_DATA\";\r\nexport const GET_COUNTRY_HISTORICAL_DATA = \"GET_COUNTRY_HISTORICAL_DATA\";\r\nexport const SET_FILTER_VALUE = \"SET_FILTER_VALUE\";\r\nexport const CLEAR_FILTER = \"CLEAR_FILTER\";\r\nexport const SET_LOADING = \"SET_LOADING\";\r\n\r\n// Data Types\r\n\r\nexport type GlobalType = {\r\n  updated: number;\r\n  country?: string;\r\n  cases: number;\r\n  todayCases: number;\r\n  deaths: number;\r\n  recovered: number;\r\n  todayRecovered: number;\r\n  active: number;\r\n  critical: number;\r\n  casesPerOneMillion: number;\r\n  deathsPerOneMillion: number;\r\n  tests: number;\r\n  testsPerOneMillion: number;\r\n  population: number;\r\n  oneCasePerPeople: number;\r\n  oneDeathPerPeople: number;\r\n  oneTestPerPeople: number;\r\n  activePerOneMillion: number;\r\n  recoveredPerOneMillion: number;\r\n  criticalPerOneMillion: number;\r\n  affectedCountries: number;\r\n};\r\n\r\nexport type GlobalHistoryType = {\r\n  dates: string[];\r\n  cases: number[];\r\n  deaths: number[];\r\n  recovered: number[];\r\n};\r\n\r\nexport type CountryDataType = {\r\n  updated: number;\r\n  country: string;\r\n  countryInfo: {\r\n    _id: number;\r\n    iso2: string;\r\n    iso3: string;\r\n    lat: number;\r\n    long: number;\r\n    flag: string;\r\n  };\r\n  cases: number;\r\n  todayCases: number;\r\n  deaths: number;\r\n  todayDeaths: number;\r\n  recovered: number;\r\n  todayRecovered: number;\r\n  active: number;\r\n  critical: number;\r\n  casesPerOneMillion: number;\r\n  deathsPerOneMillion: number;\r\n  tests: number;\r\n  testsPerOneMillion: number;\r\n  population: number;\r\n  continent: number;\r\n  oneCasePerPeople: number;\r\n  oneDeathPerPeople: number;\r\n  oneTestPerPeople: number;\r\n  activePerOneMillion: number;\r\n  recoveredPerOneMillion: number;\r\n  criticalPerOneMillion: number;\r\n};\r\n","import {\r\n  GET_GLOBAL_DATA,\r\n  GET_GLOBAL_HISTORY_DATA,\r\n  GET_COUNTRIES_DATA,\r\n  GET_COUNTRY_HISTORICAL_DATA,\r\n  GET_COUNTRY_DATA,\r\n  GlobalType,\r\n  GlobalHistoryType,\r\n  CountryDataType,\r\n  SET_FILTER_VALUE,\r\n  SET_LOADING,\r\n  CLEAR_FILTER,\r\n} from \"./ActionTypes\";\r\nimport { State } from \"./GlobalState\";\r\n// types\r\ntype action =\r\n  | {\r\n      type: typeof GET_GLOBAL_DATA;\r\n      payload: GlobalType | null;\r\n    }\r\n  | {\r\n      type: typeof GET_GLOBAL_HISTORY_DATA;\r\n      payload: GlobalHistoryType | null;\r\n    }\r\n  | {\r\n      type: typeof GET_COUNTRIES_DATA;\r\n      payload: CountryDataType[] | [];\r\n    }\r\n  | {\r\n      type: typeof SET_FILTER_VALUE;\r\n      payload: string;\r\n    }\r\n  | {\r\n      type: typeof CLEAR_FILTER;\r\n    }\r\n  | {\r\n      type: typeof GET_COUNTRY_HISTORICAL_DATA;\r\n      payload: GlobalHistoryType | null;\r\n    }\r\n  | {\r\n      type: typeof GET_COUNTRY_DATA;\r\n      payload: GlobalType | null;\r\n    }\r\n  | {\r\n      type: typeof SET_LOADING;\r\n    };\r\n\r\nconst GlobalReducer = (state: State, action: action) => {\r\n  switch (action.type) {\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case GET_GLOBAL_DATA:\r\n      return {\r\n        ...state,\r\n        global: action.payload,\r\n      };\r\n    case GET_GLOBAL_HISTORY_DATA:\r\n      return {\r\n        ...state,\r\n        globalHistory: action.payload,\r\n        loading: false,\r\n      };\r\n    case GET_COUNTRIES_DATA:\r\n      return {\r\n        ...state,\r\n        countriesData: action.payload,\r\n        loading: false,\r\n      };\r\n    case GET_COUNTRY_DATA:\r\n      return {\r\n        ...state,\r\n        countryData: action.payload,\r\n      };\r\n    case GET_COUNTRY_HISTORICAL_DATA:\r\n      return {\r\n        ...state,\r\n        countryHistory: action.payload,\r\n        loading: false,\r\n      };\r\n    case SET_FILTER_VALUE:\r\n      return {\r\n        ...state,\r\n        countriesFiltered: state.countriesData.filter((data) => {\r\n          return (\r\n            data.country.toLowerCase().indexOf(action.payload.toLowerCase()) >\r\n            -1\r\n          );\r\n        }),\r\n        loading: false,\r\n      };\r\n    case CLEAR_FILTER:\r\n      return {\r\n        ...state,\r\n        countriesFiltered: [],\r\n        loading: false,\r\n      };\r\n    default:\r\n      throw new Error(\"Bad action\");\r\n  }\r\n};\r\nexport default GlobalReducer;\r\n","import { createContext, useReducer, useContext } from \"react\";\r\nimport {\r\n  fetchGlobalData,\r\n  fetchHistoricalGlobalData,\r\n  fetchCountriesData,\r\n  fetchCountryData,\r\n  fetchCountryHistoricalData,\r\n} from \"../api/api\";\r\nimport GlobalReducer from \"./GlobalReducer\";\r\nimport {\r\n  CountryDataType,\r\n  GET_GLOBAL_DATA,\r\n  GET_COUNTRIES_DATA,\r\n  GET_GLOBAL_HISTORY_DATA,\r\n  GET_COUNTRY_HISTORICAL_DATA,\r\n  GET_COUNTRY_DATA,\r\n  SET_FILTER_VALUE,\r\n  CLEAR_FILTER,\r\n  GlobalHistoryType,\r\n  GlobalType,\r\n  SET_LOADING,\r\n} from \"./ActionTypes\";\r\n// Types\r\n\r\nexport type State = {\r\n  global: GlobalType | null;\r\n  globalHistory: GlobalHistoryType | null;\r\n  countryHistory: GlobalHistoryType | null;\r\n  countriesData: CountryDataType[] | [];\r\n  countryData: GlobalType | null;\r\n  countriesFiltered: CountryDataType[] | [];\r\n  loading: boolean;\r\n};\r\n\r\nexport interface IGlobalContextPorps {\r\n  global: GlobalType | null;\r\n  globalHistory: GlobalHistoryType | null;\r\n  countryHistory: GlobalHistoryType | null;\r\n  countriesData: CountryDataType[] | [];\r\n  countryData: GlobalType | null;\r\n  loading: boolean;\r\n  countriesFiltered: CountryDataType[] | [];\r\n  setLoading: () => void;\r\n  getGlobalData: () => void;\r\n  getHistoricalGlobalData: () => void;\r\n  getCountriesData: () => void;\r\n  filterCountries: (value: string) => void;\r\n  getCountryData: (value: string) => void;\r\n  getCountryHistoricalData: (value: string) => void;\r\n}\r\n\r\nconst initialState: State = {\r\n  global: null,\r\n  globalHistory: null,\r\n  countryHistory: null,\r\n  countriesData: [],\r\n  countryData: null,\r\n  loading: false,\r\n  countriesFiltered: [],\r\n};\r\n\r\nexport const GlobalContext = createContext<IGlobalContextPorps>(\r\n  {} as IGlobalContextPorps\r\n);\r\n\r\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [state, dispatch] = useReducer(GlobalReducer, initialState);\r\n  //   Actions\r\n\r\n  //   getGlobalData\r\n  const getGlobalData = async () => {\r\n    dispatch({\r\n      type: GET_GLOBAL_DATA,\r\n      payload: await fetchGlobalData(),\r\n    });\r\n  };\r\n  //   getHistoricalGlobalData\r\n  const getHistoricalGlobalData = async () => {\r\n    dispatch({\r\n      type: GET_GLOBAL_HISTORY_DATA,\r\n      payload: await fetchHistoricalGlobalData(),\r\n    });\r\n  };\r\n  //   getCountriesData\r\n  const getCountriesData = async () => {\r\n    dispatch({\r\n      type: GET_COUNTRIES_DATA,\r\n      payload: await fetchCountriesData(),\r\n    });\r\n  };\r\n  // getCountryData\r\n  const getCountryData = async (value: string) => {\r\n    dispatch({\r\n      type: GET_COUNTRY_DATA,\r\n      payload: await fetchCountryData(value),\r\n    });\r\n  };\r\n  // getCountryHistoricalData\r\n  const getCountryHistoricalData = async (value: string) => {\r\n    const res = await fetchCountryHistoricalData(value);\r\n    if (!res.message) {\r\n      dispatch({\r\n        type: GET_COUNTRY_HISTORICAL_DATA,\r\n        payload: res,\r\n      });\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: GET_COUNTRY_HISTORICAL_DATA,\r\n      payload: null,\r\n    });\r\n  };\r\n\r\n  // filter Countries\r\n\r\n  const filterCountries = (value: string) => {\r\n    if (value === \"\") {\r\n      dispatch({ type: CLEAR_FILTER });\r\n      return;\r\n    }\r\n    dispatch({ type: SET_FILTER_VALUE, payload: value });\r\n  };\r\n  // SetLoading\r\n\r\n  const setLoading = () => dispatch({ type: SET_LOADING });\r\n\r\n  // Destructuring state\r\n  const {\r\n    global,\r\n    loading,\r\n    globalHistory,\r\n    countriesData,\r\n    countriesFiltered,\r\n    countryData,\r\n    countryHistory,\r\n  } = state;\r\n  // return Provider\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        loading,\r\n        global,\r\n        globalHistory,\r\n        countriesData,\r\n        countriesFiltered,\r\n        countryData,\r\n        countryHistory,\r\n        setLoading,\r\n        getGlobalData,\r\n        getHistoricalGlobalData,\r\n        getCountriesData,\r\n        filterCountries,\r\n        getCountryHistoricalData,\r\n        getCountryData,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => useContext(GlobalContext);\r\n","import { Tr, Td, Avatar } from \"@chakra-ui/react\";\r\nimport { CountryDataType } from \"../../../context/ActionTypes\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst TableRow = ({ country }: { country: CountryDataType }) => {\r\n  let history = useHistory();\r\n\r\n  function handleClick() {\r\n    history.push(`/country/${country.countryInfo.iso2}`);\r\n  }\r\n  return (\r\n    <>\r\n      <Tr onClick={handleClick} _hover={{ bgColor: \"#505050b3\" }}>\r\n        <Td borderBottomColor={\"#484a4c\"}>\r\n          <Avatar\r\n            size=\"2xs\"\r\n            display=\"inline-block\"\r\n            mr={3}\r\n            name={country.country}\r\n            src={country.countryInfo.flag}\r\n          />\r\n          {country.country}\r\n        </Td>\r\n        <Td borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n          {country.cases}\r\n        </Td>\r\n        <Td borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n          {country.casesPerOneMillion}\r\n        </Td>\r\n        <Td borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n          {country.critical}\r\n        </Td>\r\n        <Td borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n          {country.recovered}\r\n        </Td>\r\n        <Td borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n          {country.deaths}\r\n        </Td>\r\n        <Td borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n          {country.deathsPerOneMillion}\r\n        </Td>\r\n        <Td borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n          {country.tests}\r\n        </Td>\r\n        <Td borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n          {country.testsPerOneMillion}\r\n        </Td>\r\n      </Tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableRow;\r\n","import { Box, Flex, IconButton, Text, Select } from \"@chakra-ui/react\";\r\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\";\r\nconst Pagination = ({\r\n  setPerPage,\r\n  setCurrentPage,\r\n  iFirst,\r\n  iLast,\r\n  length,\r\n  currentPage,\r\n  perPage,\r\n}: {\r\n  setPerPage: (val: string) => void;\r\n  setCurrentPage: (val: string) => void;\r\n  iFirst: number;\r\n  iLast: number;\r\n  length: number;\r\n  currentPage: number;\r\n  perPage: number;\r\n}) => {\r\n  return (\r\n    <Flex justifyContent=\"flex-end\" alignItems=\"center\" p={5}>\r\n      <Text color=\"#ffffff\">Rows per page:</Text>\r\n      <Box mr={2}>\r\n        <Select\r\n          border=\"none\"\r\n          _focus={{ border: \"none\" }}\r\n          color=\"#ffffff\"\r\n          value={perPage === length ? \"all\" : perPage}\r\n          onChange={(e) => setPerPage(e.target.value)}\r\n        >\r\n          <option value=\"5\">5</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"15\">15</option>\r\n          <option value=\"all\">All</option>\r\n        </Select>\r\n      </Box>\r\n      <Text color=\"#ffffff\">\r\n        {iFirst + 1}-{iLast > length ? length : iLast} of {length}\r\n      </Text>\r\n      <IconButton\r\n        aria-label=\"Previous Page\"\r\n        mx={2}\r\n        bgColor=\"transparent\"\r\n        color=\"#ffffff\"\r\n        _hover={{\r\n          bgColor: \"#272727\",\r\n        }}\r\n        _active={{\r\n          bgColor: \"#272727\",\r\n        }}\r\n        isDisabled={currentPage === 1 ? true : false}\r\n        _focus={{\r\n          outline: \"none\",\r\n        }}\r\n        isRound={true}\r\n        icon={<FaChevronLeft />}\r\n        onClick={(e) => {\r\n          setCurrentPage(\"prev\");\r\n        }}\r\n      />\r\n\r\n      <IconButton\r\n        aria-label=\"Next Page\"\r\n        bgColor=\"transparent\"\r\n        color=\"#ffffff\"\r\n        _hover={{\r\n          bgColor: \"#272727\",\r\n        }}\r\n        _active={{\r\n          bgColor: \"#272727\",\r\n        }}\r\n        _focus={{\r\n          outline: \"none\",\r\n        }}\r\n        isRound={true}\r\n        icon={<FaChevronRight />}\r\n        isDisabled={Math.ceil(length / perPage) === currentPage ? true : false}\r\n        onClick={(e) => {\r\n          setCurrentPage(\"next\");\r\n        }}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Table, Thead, Tbody, Tr, Th, Box, Spinner } from \"@chakra-ui/react\";\r\nimport TableRow from \"./TableRow\";\r\nimport Pagination from \"./Pagination\";\r\nimport { useGlobalContext } from \"../../../context/GlobalState\";\r\nconst Datatable = () => {\r\n  const [countriesPerPage, setCountriesPerPage] = useState(10);\r\n  const [currentPageNum, setCurrentPageNum] = useState(1);\r\n\r\n  const { countriesData, countriesFiltered, getCountriesData } =\r\n    useGlobalContext();\r\n  useEffect(() => {\r\n    getCountriesData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (countriesData === null) {\r\n    return (\r\n      <Spinner\r\n        thickness=\"4px\"\r\n        speed=\"0.65s\"\r\n        emptyColor=\"gray.200\"\r\n        color=\"blue.500\"\r\n        size=\"xl\"\r\n      />\r\n    );\r\n  }\r\n  const data =\r\n    countriesFiltered.length !== 0 ? countriesFiltered : countriesData;\r\n\r\n  const indexOfLastCountry = currentPageNum * countriesPerPage;\r\n  const indexOfFirstCountry = indexOfLastCountry - countriesPerPage;\r\n  const currentCountries = data.slice(indexOfFirstCountry, indexOfLastCountry);\r\n\r\n  const changePerPage = (val: string) => {\r\n    if (val === \"all\") {\r\n      setCountriesPerPage(data.length);\r\n      return;\r\n    }\r\n    setCountriesPerPage(parseFloat(val));\r\n  };\r\n  const changeCurrentPage = (val: string) => {\r\n    if (val === \"next\") {\r\n      setCurrentPageNum(currentPageNum + 1);\r\n      return;\r\n    }\r\n    if (val === \"prev\") {\r\n      currentPageNum !== 1 && setCurrentPageNum(currentPageNum - 1);\r\n      return;\r\n    }\r\n  };\r\n  console.log(\"DataTable\");\r\n\r\n  return (\r\n    <Box\r\n      width=\"100%\"\r\n      overflowX=\"auto\"\r\n      bgColor=\"#1e1e1e\"\r\n      pt={3}\r\n      overflowY=\"hidden\"\r\n    >\r\n      <Table size=\"md\" width=\"100%\" textColor=\"#ffffff\" overflowX=\"auto\">\r\n        <Thead>\r\n          <Tr>\r\n            <Th borderBottomColor={\"#484a4c\"}>Country</Th>\r\n            <Th borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n              Cases\r\n            </Th>\r\n            <Th borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n              Cases Per Million\r\n            </Th>\r\n            <Th borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n              Critical\r\n            </Th>\r\n            <Th borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n              Recovered\r\n            </Th>\r\n            <Th borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n              Deaths\r\n            </Th>\r\n            <Th borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n              Deaths Per Million\r\n            </Th>\r\n            <Th borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n              Tests\r\n            </Th>\r\n            <Th borderBottomColor={\"#484a4c\"} textAlign=\"center\">\r\n              Tests Per Million\r\n            </Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {currentCountries.map((country) => (\r\n            <TableRow key={country.country} country={country} />\r\n          ))}\r\n        </Tbody>\r\n      </Table>\r\n      <Pagination\r\n        setPerPage={changePerPage}\r\n        setCurrentPage={changeCurrentPage}\r\n        iFirst={indexOfFirstCountry}\r\n        iLast={indexOfLastCountry}\r\n        length={data.length}\r\n        currentPage={currentPageNum}\r\n        perPage={countriesPerPage}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Datatable;\r\n","// import { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Grid,\r\n  Heading,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n} from \"@chakra-ui/react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { useGlobalContext } from \"../context/GlobalState\";\r\n\r\nconst SearchData = () => {\r\n  const { filterCountries } = useGlobalContext();\r\n  const onChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    filterCountries(e.target.value);\r\n  };\r\n\r\n  console.log(\"searchData\");\r\n  return (\r\n    <Grid\r\n      width=\"100%\"\r\n      templateColumns={[\"repeat(1, 1fr)\", \"repeat(1, 1fr)\", \"repeat(2, 1fr)\"]}\r\n    >\r\n      <Heading color=\"#ffffff\">ALL COUNTRIES</Heading>\r\n      <InputGroup size=\"md\" variant=\"flushed\" color=\"#ffffff\">\r\n        <Input\r\n          pr=\"4.5rem\"\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          focusBorderColor=\"#ffffff\"\r\n          onChange={onChange}\r\n        />\r\n        <InputRightElement children={<FaSearch />} />\r\n      </InputGroup>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchData;\r\n","import { VStack } from \"@chakra-ui/react\";\r\nimport Datatable from \"./DataTable/Datatable\";\r\nimport SearchData from \"../SearchData\";\r\nconst TableSection = () => {\r\n  return (\r\n    <VStack spacing=\"30px\" mt=\"30px\" width=\"100%\">\r\n      <SearchData />\r\n      <Datatable />\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default TableSection;\r\n","import { Box, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { GlobalHistoryType } from \"../../context/ActionTypes\";\r\nconst Datachart = React.memo(({ data }: { data: GlobalHistoryType | null }) => {\r\n  if (data === null) {\r\n    return (\r\n      <Box width=\"100%\" my={5} p={4} bgColor=\"#1e1e1e\">\r\n        <Text\r\n          fontSize={[\"lg\", \"xl\", \"4xl\"]}\r\n          textAlign=\"center\"\r\n          color=\"gray.400\"\r\n        >\r\n          No historical Data Found....\r\n        </Text>\r\n      </Box>\r\n    );\r\n  }\r\n  console.log(\"dataChart\");\r\n\r\n  const { dates, cases, deaths } = data;\r\n\r\n  return (\r\n    <>\r\n      <Box width=\"100%\" my={5} p={4} bgColor=\"#1e1e1e\">\r\n        <Line\r\n          data={{\r\n            labels: dates,\r\n            datasets: [\r\n              {\r\n                data: cases,\r\n                label: \"Infected\",\r\n                borderColor: \"#2196f3\",\r\n                fill: true,\r\n              },\r\n              {\r\n                data: deaths,\r\n                label: \"Deaths\",\r\n                borderColor: \"#ff5252\",\r\n                backgroundColor: \"rgba(255, 82, 82, 0.5)\",\r\n                fill: true,\r\n              },\r\n            ],\r\n          }}\r\n          width={600}\r\n          height={400}\r\n          options={{\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n          }}\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Datachart;\r\n","import { Heading, HStack, Icon, Box, Text } from \"@chakra-ui/react\";\r\ntype data = {\r\n  title: string;\r\n  total: number;\r\n  today: string;\r\n  perMill: string;\r\n  colorText: string;\r\n  iconColor: string;\r\n  colorBorder: string;\r\n  iconName: any;\r\n};\r\n\r\nconst InfoCards = ({\r\n  data: {\r\n    title,\r\n    total,\r\n    today,\r\n    perMill,\r\n    colorText,\r\n    colorBorder,\r\n    iconColor,\r\n    iconName,\r\n  },\r\n}: {\r\n  data: data;\r\n}) => {\r\n  return (\r\n    <Box\r\n      p={4}\r\n      width=\"100%\"\r\n      borderTop=\"5px\"\r\n      borderStyle=\"solid\"\r\n      bgColor=\"#1e1e1e\"\r\n      borderRadius=\"md\"\r\n      borderTopColor={colorBorder}\r\n    >\r\n      <HStack py={1} justifyContent=\"space-between\">\r\n        <Heading as=\"h3\" size=\"md\" color=\"#ffffff\">\r\n          {title}\r\n        </Heading>\r\n        <Icon color={iconColor} as={iconName} />\r\n      </HStack>\r\n      <HStack py={1} alignItems=\"baseline\">\r\n        <Heading as=\"h3\" size=\"lg\" color=\"#ffffffb3\">\r\n          {total}\r\n        </Heading>\r\n        <Text fontSize=\"xs\" fontWeight=\"bold\" color={colorText}>\r\n          {today}\r\n        </Text>\r\n      </HStack>\r\n      <HStack py={1}>\r\n        <Text fontSize=\"xs\" fontWeight=\"bold\" color={colorText}>\r\n          {perMill}\r\n        </Text>\r\n      </HStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InfoCards;\r\n","import React from \"react\";\r\nimport InfoCard from \"./InfoCard/InfoCard\";\r\nimport { Grid, Text, HStack, Box } from \"@chakra-ui/react\";\r\nimport { FaGlobeAmericas, FaHeart, FaSkullCrossbones } from \"react-icons/fa\";\r\nimport { RiSurgicalMaskFill } from \"react-icons/ri\";\r\nimport { GlobalType } from \"../../context/ActionTypes\";\r\nconst Cards = React.memo(({ data }: { data: GlobalType | null }) => {\r\n  if (data === null) {\r\n    return (\r\n      <Box width=\"100%\" my={5} p={4} bgColor=\"#1e1e1e\">\r\n        <Text\r\n          fontSize={[\"lg\", \"xl\", \"4xl\"]}\r\n          textAlign=\"center\"\r\n          color=\"gray.400\"\r\n        >\r\n          No historical Data Found....\r\n        </Text>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  const {\r\n    country,\r\n    cases,\r\n    todayCases,\r\n    deaths,\r\n    recovered,\r\n    todayRecovered,\r\n    active,\r\n    critical,\r\n    casesPerOneMillion,\r\n    deathsPerOneMillion,\r\n    population,\r\n    activePerOneMillion,\r\n    recoveredPerOneMillion,\r\n  } = data;\r\n  const dataArray = [\r\n    {\r\n      title: \"Total Cases\",\r\n      total: cases,\r\n      today: `+${todayCases} Case Today`,\r\n      perMill: `${casesPerOneMillion} cases per million`,\r\n      colorText: \"#ff5252\",\r\n      iconColor: \"#ffffff\",\r\n      colorBorder: \"#424242\",\r\n      iconName: FaGlobeAmericas,\r\n    },\r\n    {\r\n      title: \"Active Cases\",\r\n      total: active,\r\n      today: `${critical} Critical`,\r\n      perMill: `${activePerOneMillion} active per million`,\r\n      colorText: \"#ff5252\",\r\n      iconColor: \"#2196f3\",\r\n      colorBorder: \"#2196f3\",\r\n      iconName: RiSurgicalMaskFill,\r\n    },\r\n    {\r\n      title: \"Recovered\",\r\n      total: recovered,\r\n      today: `+${todayRecovered} recovered today`,\r\n      perMill: `${recoveredPerOneMillion} per million`,\r\n      colorText: \"#4caf50\",\r\n      iconColor: \"#4caf50\",\r\n      colorBorder: \"#4caf50\",\r\n      iconName: FaHeart,\r\n    },\r\n    {\r\n      title: \"Deaths\",\r\n      total: deaths,\r\n      today: \"\",\r\n      perMill: `${deathsPerOneMillion} per million`,\r\n      colorText: \"#ff5252\",\r\n      iconColor: \"#ff5252\",\r\n      colorBorder: \"#ff5252\",\r\n      iconName: FaSkullCrossbones,\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <HStack py={1} width=\"100%\" justifyContent=\"space-between\">\r\n        <Text fontSize={[\"lg\", \"xl\", \"4xl\"]} color=\"gray.200\">\r\n          {country ? `${country} Population` : \" World Population\"}\r\n        </Text>\r\n        <Text fontSize={[\"lg\", \"xl\", \"4xl\"]} color=\"gray.200\">\r\n          {population}\r\n        </Text>\r\n      </HStack>\r\n      <Grid\r\n        width=\"100%\"\r\n        templateColumns={[\r\n          \"repeat(1, 1fr)\",\r\n          \"repeat(1, 1fr)\",\r\n          \"repeat(2, 1fr)\",\r\n          \"null\",\r\n          \"repeat(4, 1fr)\",\r\n        ]}\r\n        gap={5}\r\n      >\r\n        {dataArray.map((item) => (\r\n          <InfoCard key={item.title} data={item} />\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Cards;\r\n","import { useEffect } from \"react\";\r\nimport { VStack, Spinner, Flex } from \"@chakra-ui/react\";\r\n// components\r\nimport TableSection from \"../components/TableSection/TableSection\";\r\nimport Datachart from \"../components/DataChart/Datachart\";\r\nimport Cards from \"../components/Cards/Cards\";\r\nimport { useGlobalContext } from \"../context/GlobalState\";\r\nfunction Home() {\r\n  const {\r\n    global,\r\n    getGlobalData,\r\n    globalHistory,\r\n    loading,\r\n    setLoading,\r\n    getHistoricalGlobalData,\r\n  } = useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    setLoading();\r\n    getGlobalData();\r\n    getHistoricalGlobalData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (loading === true) {\r\n    return (\r\n      <Flex\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        minH=\"100vh\"\r\n        bgColor=\"#121212\"\r\n      >\r\n        <Spinner\r\n          thickness=\"4px\"\r\n          speed=\"0.65s\"\r\n          emptyColor=\"gray.200\"\r\n          color=\"blue.500\"\r\n          size=\"xl\"\r\n        />\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <VStack spacing=\"24px\" justifyContent=\"space-between\">\r\n      <Cards data={global} />\r\n      <Datachart data={globalHistory} />\r\n      <TableSection />\r\n    </VStack>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { useEffect } from \"react\";\r\nimport { VStack, Spinner, Flex, Button } from \"@chakra-ui/react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n// components\r\nimport Datachart from \"../components/DataChart/Datachart\";\r\nimport Cards from \"../components/Cards/Cards\";\r\nimport { useGlobalContext } from \"../context/GlobalState\";\r\n\r\nexport interface RouteParams {\r\n  id: string;\r\n}\r\nconst Country = () => {\r\n  let history = useHistory();\r\n\r\n  function handleClick() {\r\n    history.push(\"/\");\r\n  }\r\n  let { id } = useParams<RouteParams>();\r\n  const {\r\n    countryData,\r\n    countryHistory,\r\n    loading,\r\n    setLoading,\r\n    getCountryData,\r\n    getCountryHistoricalData,\r\n  } = useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    setLoading();\r\n    getCountryData(id);\r\n    getCountryHistoricalData(id);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (loading === true) {\r\n    return (\r\n      <Flex\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        minH=\"100vh\"\r\n        bgColor=\"#121212\"\r\n      >\r\n        <Spinner\r\n          thickness=\"4px\"\r\n          speed=\"0.65s\"\r\n          emptyColor=\"gray.200\"\r\n          color=\"blue.500\"\r\n          size=\"xl\"\r\n        />\r\n      </Flex>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <VStack spacing=\"24px\" justifyContent=\"space-between\">\r\n        <Cards data={countryData} />\r\n        <Datachart data={countryHistory} />\r\n      </VStack>\r\n      <Flex justifyContent=\"flex-end\" mt={4}>\r\n        <Button\r\n          onClick={handleClick}\r\n          bgColor=\"#1e1e1e\"\r\n          _hover={{ bgColor: \"#1e1e1e\" }}\r\n          color=\"#ffffff\"\r\n        >\r\n          Go to Home\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","import { Flex, Text, Link } from \"@chakra-ui/react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Flex justifyContent=\"center\" mt={5} alignItems=\"center\">\r\n      <Text color=\"#ffffff\">\r\n        Developed by{\" \"}\r\n        <Link\r\n          target=\"_blank\"\r\n          color=\"#2196f3\"\r\n          href=\"https://github.com/ahmadshah39\"\r\n        >\r\n          Muhammad Ahmad Shah\r\n        </Link>\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import \"./App.css\";\nimport { Heading, VStack, Container } from \"@chakra-ui/react\";\n\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport Home from \"./Pages/Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Country from \"./Pages/Country\";\nimport Footer from \"./components/Footer/Footer\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <VStack minH=\"100vh\" py={5} bgColor=\"#121212\">\n        <Heading as=\"h1\" my=\"4\" textAlign=\"center\" size=\"xl\" color=\"gray.400\">\n          GLOBAL COVID INFO\n        </Heading>\n\n        <Container maxW=\"90%\">\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" children={<Home />} />\n              <Route exact path=\"/country/:id\" children={<Country />} />\n            </Switch>\n          </Router>\n          <Footer />\n        </Container>\n      </VStack>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}